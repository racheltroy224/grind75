//this solutions runtime was 6 ms beat 9.18% of previous attempts on leetcode (need to come back and optimize)
//this solutions memory was 6.8 MB which beat 42.70% of previous attempts on leetcode (need to come back and optimize)

class Solution {
public:
    int longestPalindrome(string s) {
        
        if(s.length() == 1 || s.length() == 0) {
            return s.length();
        }

        int palCount = 0;
        int firstInst = 0;
        bool hasMiddle = false;
        char temp;

        while(s.length() > 0) {
            temp = s.at(0);
            s.erase(0, 1);
            firstInst = s.find(temp);

            if(firstInst > s.length()) {
                if(!hasMiddle) {
                    palCount++;
                    hasMiddle = true;
                }
                
            } else {
                s.erase(firstInst, 1);
                palCount += 2;
            }

        }

        return palCount;
    }
};
